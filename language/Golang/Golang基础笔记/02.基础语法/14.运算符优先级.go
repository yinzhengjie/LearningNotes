package main

import (
	"fmt"
)

func main() {

	/*
		判断用户输出的年份是否是闰年
	*/
	var year int
	fmt.Printf("请输入年份:>>> ") //给用户做一个输入提示信息
	fmt.Scan(&year)

	fmt.Printf("判断%d年是否是闰年，结果为%t\n", year, year%4 == 0 && year%100 != 0 || year%400 == 0)

	/*
		分析上面的"year%4 == 0 && year%100 != 0 || year%400 == 0"中语句的包含的运算符优先级如下所示:
			(1)算数运算符
				year%4
				year%100
				year%400
			(2)关系/比较运算符:
				year%4 == 0
				year%400 == 0
				year%100 != 0
			(3)　逻辑运算符:
				year%4 == 0 && year%100 != 0
				year%4 == 0 && year%100 != 0 || year%400 == 0

		代码改进分析:
			如上分析所示，根据操作符优先级表查出先做算数运算符，再做比较运算符，最后再做逻辑运算符。
			代码的可读性较差，每次都得去查表，生产环境我们可以使用一些优先级的小技巧:
					(1)记不住，用括号
					(2)长表达式，多用括号，
					(3)易懂、易读
			综上所述，我们可以改写为以下表达式，使得可读性增强:
				(year%4 == 0) && (year%100 != 0) || (year%400 == 0)
	*/
	fmt.Printf("判断%d年是否是闰年，结果为%t\n", year, (year%4 == 0) && (year%100 != 0) || (year%400 == 0))
}
