//protobuf默认支持的版本是2.x,现在一般使用3.x版本,所以需要手动指定版本号,如果不这样做，协议缓冲区编译器将假定正在使用proto2。这也必须是文件的第一个非空的非注释行。
syntax = "proto3";

//指定包名,package关键字指明当前是mypb包生(成go文件之后和Go的包名保持一致,但是如果定义了"option go_package"参数，则package的参数自动失效)
package mypb;

//.proto文件应包含一个go_package选项，用于指定包含所生成代码的Go软件包的完整导入路径(最后一次"bar"就是生成go文件的包名),官方在未来的发行版本会支持哟;
option go_package ="example.com/foo/bar";

/*
    通过message关键定义传输数据的格式,，类似于go语言中的结构体，是包含一系列类 型数据的集合。
    许多标准的简单数据类型都可以作为字段类型，包括 bool ， int32 ， float ， double ，和 string 。也可以使用其他message类型作为字段类型。
*/
message People{
    /*
        注意哈,这里的"1"表示字段是1,类似于数据库中表的主键id等于1,主键不能重复，标识位数据不能重复。该成员编码时用1代替名字。
        我们知道，在json中是通过成员的名字来绑定对应的数据，但是Protobuf编码却是通过成员的唯一编号来绑定对应的数据。
        综上所述,因此Protobuf编码后数据的体积会比较小，能够快速传输，缺点是不利于阅读。
    */
    string name = 1;

    //需要注意的是,标识为不能使用19000-19999(系统预留位)
    int32 age = 2;

    //结构体嵌套,比如我们嵌套一个Student结构体
    Student s = 3;

    //使用数组
    repeated string  phone = 4;
}

/*
    message的格式说明如下:
        消息由至少一个字段组合而成，类似于Go语言中的结构体，每个字段都有一定的格式
        （字段修饰符）数据类型 字段名称 = 唯一的编号标签值;

    唯一的编号标签：
        代表每个字段的一个唯一的编号标签，在同一个消息里不可以重复。这些编号标签用与在消息二进制格式中标识你的字段，并且消息一旦定义就不能更改。需要说明的是标签在1到15范围的采用一个字节进行编码，所以通常将标签1到15用于频繁发生的消 息字段。
        编号标签大小的范围是1到2的29次。19000-19999是官方预留的值，不能使用。

    注释格式：
        向.proto文件添加注释，可以使用C/C++/java/Go风格的双斜杠或者段落注释语法格式。

    message常见的数据类型与go中类型对比:
        .proto类型            Go类型            介绍
        double              ﬂoat64          64位浮点数
        ﬂoat                ﬂoat32          32位浮点数
        int32               int32           使用可变长度编码。编码负数效率低下——如果你的字段可能有负值， 请改用sint32。
        int64               int64           使用可变长度编码。编码负数效率低下——如果你的字段可能有负值， 请改用sint64。
        uint32              uint32          使用可变长度编码。
        uint64              uint64          使用可变长度编码。
        sint32              int32           使用可变长度编码。符号整型值。这些比常规int32s编码负数更有效。
        sint64              int64           使用可变长度编码。符号整型值。这些比常规int64s编码负数更有效。
        ﬁxed32              uint32          总是四字节。如果值通常大于228，则比uint 32更有效
        ﬁxed64              uint64          总是八字节。如果值通常大于256，则比uint64更有效
        sﬁxed32             int32           总是四字节。
        sﬁxed64             int64           总是八字节。
        bool                bool            布尔类型
        string              string          字符串必须始终包含UTF - 8编码或7位ASCII文本
        bytes               []byte          可以包含任意字节序列
*/
message Student{
    string name = 1;
    int32 age = 5;
}