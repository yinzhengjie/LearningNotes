package main

import (
	"fmt"
)

func main() {
	/*
	   Go语言切片删除:
	       Go语言并没有对删除切片提供相对应的函数，需要使用切片本身的特性来删除元素。

	   切片删除的本质:
	        以被删除的元素为起点，到删除的元素为终点，将前后两部分数据在内存重新连接起来。
	        当删除一个切片的第一个元素时，那么第一个元素的存储空间会被释放，但此时后面的所有元素都得集体往前移动一个元素哟，这是很消耗性能的,尤其是在数据量大的情况下;
	        当删除一个切片的最后一个元素时，那么最后一个元素的存储空间也会被释放，由于最后一个元素后面没有元素啦，因此不会产生数据的移动。

	   温馨提示:
	        如果切片元素过多，整个删除过程非常消耗性能,因为删除切片前面的元素，那么该切片前面的元素空出来后，后面的元素依次往前面移动，如果数据量很大的情况下效率极低。
	        生产环境中，不建议大家对数据量较大的切片进行元素删除操作，如果数据有频繁的删除操作哦，建议换其它数据存储容器。
	        删除切片的数据并不会修改切片的容量大小。
	*/
	s1 := []rune{'2', '0', '2', '0', '尹', '正', '杰', '来', '也'}
	fmt.Printf("删除前s1的数据为:[%s],长度为:[%d],容量为:[%d],内存地址为:[%p]\n", string(s1), len(s1), cap(s1), s1)
	fmt.Printf("删除前s1各元素地址:[%p] [%p] [%p] [%p] [%p] [%p] [%p] [%p] [%p]  \n", &s1[0], &s1[1], &s1[2], &s1[3], &s1[4], &s1[5], &s1[6], &s1[7], &s1[8])

	s1 = append(s1[:0], s1[4:]...) //删除下标前面四个的元素，左闭右开(即顾左不顾右),需要使用不定参格式
	fmt.Printf("删除后s1的数据为:[%s],长度为:[%d],容量为:[%d],内存地址为:[%p]\n", string(s1), len(s1), cap(s1), s1)
	fmt.Printf("删除后s1各元素地址:[%p] [%p] [%p] [%p] [%p] \n", &s1[0], &s1[1], &s1[2], &s1[3], &s1[4])
}
