package main

import "fmt"

func main() {
	/*
		什么是数组:
			数组是指一组相同类型的数据在内存中有序存储的集合。数组的长度只能是常量，也就是说数组一旦定义后就无法对这个数组进行扩容。

		数组的定义格式:
			语法一(声明数组):
				var 数组名称 [元素个数]数组类型

			语法二(数组初始化):
				var 数组名称 [元素个数]数组类型 = [元素个数]数组类型{元素1,元素2,...元素N}

			语法三(自动推导类型初始化):
				arr3 := [元素个数]数组类型{}
	*/

	/*
		如下所示，数组定义也是通过var关键词，后面是数组的名称arr1，数组的长度是10，数组类型是整型。
		当定义数组后，就在内存中开辟了10个连续的存储空间，每个数据都存储在相应的空间内，数组中包含的每个数据被称为数组元素(element),一个数组包含的元素个数被称为数组的长度。
	*/
	var arr1 [10]int

	fmt.Printf("arr1数组未赋值前的默认值为:%d\n", arr1)
	/*
		数组定义完成后，可以对数组进行赋值操作。
		数组是通过下标来进行操作的，下标的范围是从0开始到数组长度减1的位置，使用数组下标来赋值时需要注意以下几项:
			(1)如果数组下标小于0或大于数组长度减1，则会出现索引越界异常;
			(2)如果数组定义为负值，则根据不同类型的数据进行初始化;

		常见数组类型的默认值:
			整型默认初始化值为0;
			浮点型默认初始化值为0;
			字符串类型默认初始化值为空串("");
			布尔类型默认初始化值为false;
	*/
	arr1[1] = 100
	arr1[3] = 200
	arr1[5] = 300
	fmt.Printf("arr1数组经过赋值后的数据为:%d\n", arr1)

	/*
		数组初始化:
			在定义数组时也可以完成赋值，这种情况叫做数组的初始化。
	*/
	var arr3 [5]int = [5]int{1, 3, 5, 7, 9} //全部初始化

	var arr5 [7]int = [7]int{2, 4, 6, 8, 10} //初始化部分数据，未初始化值为默认值

	arr7 := [3]int32{'尹', '正', '杰'} //自动推导类型初始化

	arr9 := [9]rune{3: '尹', 4: '正', 5: '杰'} //指定元素初始化，未初始化值使用默认值

	fmt.Printf("arr3数组经过初始化赋值后的数据为:%d\n", arr3)
	fmt.Printf("arr5数组经过初始化赋值后的数据为:%d\n", arr5)
	fmt.Printf("arr7数组经过初始化赋值后的数据为:%d\n", arr7)
	fmt.Printf("arr9数组经过初始化赋值后的数据为:%d\n", arr9)

}
