package main

import (
	"fmt"
)

func Demo(s1 []int32) {
	//修改切片元素的值
	s1[0] = 'Y'

	fmt.Printf("s1的数据为:[%s],内存地址为:[%p]\n", string(s1), s1)
}

func main() {

	char := []rune{'尹', '正', '杰', '到', '此', '一', '游'}
	fmt.Printf("char的数据为:[%s],内存地址为:[%p]\n", string(char), char)

	/*
	   在Go语言中，数组作为参数进行传递时值传递，而切片作为参数进行传递时引用传递。
	       值传递:
	           方法调用时，实参数把他的值传递给对应的形式参数，方法执行中形式参数值的改变不会影响实际参数的值。
	       引用传递(也称为传地址):
	           函数调用时，实际参数的引用(地址，而不是参数的值)被传递给函数中相对应的形式参数(实参与形参指向了同一块存储区域);
	           在函数执行时,对形式参数的操作实际上就是对实际参数的操作，方法执行中形式参数值的改变会影响实际参数的值。

	   温馨提示:
	       建议在开发中使用切片代替数组。
	*/
	Demo(char)

	fmt.Printf("char的数据为:[%s],内存地址为:[%p]\n", string(char), char) //主线程调用函数切片元素的值被修改
}
